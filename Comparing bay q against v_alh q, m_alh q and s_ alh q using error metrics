# -*- coding: utf-8 -*-
"""
Created on Mon Aug 18 14:56:07 2025

@author: agbabiaka
"""

import pandas as pd
import numpy as np
from sklearn.metrics import mean_absolute_error, mean_squared_error
import matplotlib.pyplot as plt

# Load the CSV file into a DataFrame
df = pd.read_csv('C:/Users/HomePC/Downloads/Quick Share/Mean Comparison.csv')

# Verify that required columns exist in the DataFrame
required_columns = ['v_alh (q)', 'm_alh (q)', 's_alh (q)', 'Bay (q)']
if not all(col in df.columns for col in required_columns):
    missing = [col for col in required_columns if col not in df.columns]
    raise ValueError(f"Missing columns in CSV: {missing}")

# Function to compute metrics
def compute_metrics(y_true, y_pred):
    mae = mean_absolute_error(y_true, y_pred)
    mse = mean_squared_error(y_true, y_pred)
    rmse = np.sqrt(mse)
    return mae, mse, rmse

# Compute metrics for each prediction column against 'Bay (q)'
v_mae, v_mse, v_rmse = compute_metrics(df['Bay (q)'], df['v_alh (q)'])
m_mae, m_mse, m_rmse = compute_metrics(df['Bay (q)'], df['m_alh (q)'])
s_mae, s_mse, s_rmse = compute_metrics(df['Bay (q)'], df['s_alh (q)'])

# Print results
print("Metrics for v_alh (q) vs Bay (q):")
print(f"MAE: {v_mae:.4f}, MSE: {v_mse:.4f}, RMSE: {v_rmse:.4f}")
print("\nMetrics for m_alh (q) vs Bay (q):")
print(f"MAE: {m_mae:.4f}, MSE: {m_mse:.4f}, RMSE: {m_rmse:.4f}")
print("\nMetrics for s_alh (q) vs Bay (q):")
print(f"MAE: {s_mae:.4f}, MSE: {s_mse:.4f}, RMSE: {s_rmse:.4f}")

# Prepare data for bar chart
metrics = {
    'v_alh (q)': [v_mae, v_mse, v_rmse],
    'm_alh (q)': [m_mae, m_mse, m_rmse],
    's_alh (q)': [s_mae, s_mse, s_rmse]
}
metric_names = ['MAE', 'MSE', 'RMSE']
models = list(metrics.keys())
n_models = len(models)
n_metrics = len(metric_names)

# Set up bar chart
fig, ax = plt.subplots(figsize=(10, 6))
bar_width = 0.25
index = np.arange(n_models)

# Plot bars for each metric
plt.bar(index, [metrics[model][0] for model in models], bar_width, label='MAE', color='skyblue')
plt.bar(index + bar_width, [metrics[model][1] for model in models], bar_width, label='MSE', color='lightgreen')
plt.bar(index + 2 * bar_width, [metrics[model][2] for model in models], bar_width, label='RMSE', color='salmon')

# Customize the chart
plt.xlabel('Models')
plt.ylabel('Metric Values')
plt.title('Comparison of MAE, MSE, and RMSE for Models vs Bay (q)')
plt.xticks(index + bar_width, models)
plt.legend()
plt.tight_layout()

# Show the plot
plt.show()
